{"version":3,"sources":["components/App.js","index.js"],"names":["App","req","XMLHttpRequest","open","send","onload","json","JSON","parse","responseText","base_temp","baseTemperature","data","monthlyVariance","map","d","Object","objectSpread","temp","variance","month","num_months","toConsumableArray","Set","length","num_years","year","low_temp","d3","high_temp","console","log","CELL_WIDTH","CELL_HEIGHT","MAP_COLORS","TEMP_SEGMENT_LENGTH","TEMP_SEGMENTS","i","push","MONTH_NAMES","LEGEND_CELL_WIDTH","xScale","domain","range","WIDTH","yScale","HEIGHT","svg","append","attr","tooltip","style","selectAll","enter","Math","floor","on","transition","duration","html","round","xAxis","tickFormat","toString","call","yAxis","legend","text","concat","LEGEND_HEIGHT","react_default","a","createElement","className","id","React","Component","ReactDOM","render","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.89ad9789.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n\r\n        let req = new XMLHttpRequest();\r\n        let dataURL = \"https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json\";\r\n        req.open('GET', dataURL, true);\r\n        req.send();\r\n        req.onload = () => {\r\n            let json = JSON.parse(req.responseText);\r\n            let base_temp = json.baseTemperature;\r\n            let data = json.monthlyVariance.map( (d) => {\r\n                return {...d, temp: base_temp + d.variance, month: d.month - 1};\r\n            });\r\n            let num_months = [...new Set(data.map( d => d.month))].length;\r\n            let years = [...new Set(data.map(d => d.year))];\r\n            let num_years = years.length;\r\n            let low_temp = d3.min(data, (d) => d.temp);\r\n            let high_temp = d3.max(data, (d) => d.temp);\r\n            console.log(data);\r\n            console.log(low_temp, high_temp);\r\n\r\n            // set dimensions of chart\r\n            const WIDTH = 900;\r\n            const HEIGHT = 600;\r\n            const PADDING = 60;\r\n            const CELL_WIDTH = (WIDTH - (2 * PADDING)) / num_years;\r\n            const CELL_HEIGHT = (HEIGHT - (2 * PADDING)) / (num_months);\r\n            const MAP_COLORS = [\"#F3F2F7\", \"#8E85F2\", \"#6B43E6\", \"#2B30CC\", \"#F7F7BC\",\r\n                                \"#F2D17E\", \"#E39139\", \"#EB6C17\", \"#EB3E17\", \"#FF0000\"]\r\n            const TEMP_SEGMENT_LENGTH = (high_temp - low_temp) / MAP_COLORS.length;\r\n            const TEMP_SEGMENTS = []\r\n            for (let i = 0; i < MAP_COLORS.length; i++) {\r\n                TEMP_SEGMENTS.push(low_temp + (i * TEMP_SEGMENT_LENGTH));\r\n            } \r\n            console.log(TEMP_SEGMENTS);\r\n            const MONTH_NAMES = [\"January\",\"February\",\"March\",\"April\",\r\n                                 \"May\",\"June\",\"July\",\"August\",\r\n                                 \"September\", \"October\",\"November\",\"December\"];\r\n            const LEGEND_WIDTH = 200;\r\n            const LEGEND_HEIGHT = 40;\r\n            const LEGEND_PADDING = 10;\r\n            const LEGEND_CELL_WIDTH = (LEGEND_WIDTH - (2 * LEGEND_PADDING)) / TEMP_SEGMENTS.length;\r\n\r\n            // set scales for axes:\r\n            let xScale = d3.scaleLinear()\r\n                           .domain([d3.min(data, (d) => d.year), d3.max(data, (d) => d.year)])\r\n                           .range([PADDING, WIDTH - PADDING]);\r\n            let yScale = d3.scaleLinear()\r\n                           .domain([d3.min(data, (d) => d.month), d3.max(data, (d) => d.month)])\r\n                           .range([PADDING, HEIGHT - PADDING]);\r\n            console.log(xScale(1753), xScale(2015), yScale(1), yScale(12));\r\n\r\n            let svg = d3.select(\"#chart\")\r\n                        .append(\"svg\")\r\n                        .attr(\"preserveASpectRatio\", \"xMinYMin meet\")\r\n                        .attr(\"viewBox\", \"0 0 \" + WIDTH + \" \" + HEIGHT)\r\n                        .attr(\"id\", \"chart-content\");\r\n            \r\n            // define the tooltip object\r\n            const tooltip = d3.select(\"#chart\")\r\n                              .append(\"div\")\r\n                              .attr(\"class\", \"tooltip\")\r\n                              .attr(\"id\",\"tooltip\")\r\n                              .style(\"opacity\",0);\r\n            \r\n            svg.selectAll(\"rect\")\r\n               .data(data)\r\n               .enter()\r\n               .append(\"rect\")\r\n               .attr(\"class\",\"cell\")\r\n               .attr(\"data-month\", (d) => d.month)\r\n               .attr(\"data-year\", (d) => d.year)\r\n               .attr(\"data-temp\", (d) => d.temp)\r\n               .attr(\"x\", (d) => xScale(d.year))\r\n               .attr(\"y\", (d) => yScale(d.month) - (CELL_HEIGHT/2))\r\n               .attr(\"width\", CELL_WIDTH)\r\n               .attr(\"height\", CELL_HEIGHT)\r\n               .style(\"fill\", (d) => MAP_COLORS[Math.floor((d.temp - low_temp)/TEMP_SEGMENT_LENGTH)])\r\n               .on(\"mouseover\", (d,i) => {\r\n                tooltip.transition()\r\n                       .duration(200)\r\n                       .style('opacity',.9);\r\n                 tooltip.html(`<strong>` + MONTH_NAMES[d.month] + ' ' + d.year + `</strong><br>\r\n                               <strong>Temp: </strong>` + Math.round(d.temp*1000)/1000 + \r\n                               `&deg;<br><strong>Variance: </strong>` + d.variance + `&deg;`)\r\n                        .style('left', (xScale(d.year) - 150) + \"px\")\r\n                        .style('top', yScale(d.month) + \"px\")\r\n                        .attr(\"data-year\", d.year);\r\n            })\r\n            .on('mouseout', (d) => {\r\n                tooltip.transition()\r\n                       .duration(200)\r\n                       .style('opacity',0);\r\n            });\r\n            \r\n\r\n            let xAxis = d3.axisBottom(xScale)\r\n                          .tickFormat( (d) => d.toString() );\r\n            svg.append(\"g\")\r\n               .attr(\"transform\", \"translate(0,\" + (HEIGHT - PADDING + (CELL_HEIGHT / 2)) + \")\")\r\n               .attr(\"id\", \"x-axis\")\r\n               .call(xAxis);\r\n\r\n            let yAxis = d3.axisLeft(yScale)\r\n                          .tickFormat( (d) => MONTH_NAMES[d]);\r\n            svg.append(\"g\")\r\n               .attr(\"transform\", \"translate(\" + PADDING + \", 0)\")\r\n               .attr(\"id\",\"y-axis\")\r\n               .call(yAxis);\r\n            \r\n            // add legend at bottom:    \r\n\r\n            let legend = d3.select(\"#legend\")\r\n                           .append(\"svg\")\r\n                           .attr(\"preserveASpectRatio\", \"xMinYMin meet\")\r\n                           .attr(\"viewBox\", \"0 0 \" + LEGEND_WIDTH + \" \" + (LEGEND_HEIGHT + LEGEND_PADDING))\r\n                           .attr(\"id\", \"legend-content\");\r\n            \r\n            legend.append(\"text\")\r\n                  .attr(\"id\",\"legend-intro\")\r\n                  .attr(\"x\", LEGEND_PADDING)\r\n                  .attr(\"y\", LEGEND_PADDING)\r\n                  .text(\"Legend:\");\r\n\r\n            legend.selectAll(\"rect\")\r\n                  .data(MAP_COLORS)\r\n                  .enter()\r\n                  .append(\"rect\")\r\n                  .attr(\"x\", (d,i) => LEGEND_PADDING + (i * LEGEND_CELL_WIDTH))\r\n                  .attr(\"y\", 8 + LEGEND_PADDING)\r\n                  .attr(\"height\", LEGEND_CELL_WIDTH)\r\n                  .attr(\"width\", LEGEND_CELL_WIDTH)\r\n                  .attr(\"fill\", (d) => d);\r\n\r\n            legend.selectAll(\"text\")\r\n                  .data([0,...TEMP_SEGMENTS])\r\n                  .enter()\r\n                  .append(\"text\")\r\n                  .attr(\"class\",\"legend-labels\")\r\n                  .attr(\"x\", (d,i) => (i * LEGEND_CELL_WIDTH))\r\n                  .attr(\"y\", LEGEND_HEIGHT + 4)\r\n                  .attr(\"transform\", (d,i) => \"rotate(35, \"+ (LEGEND_PADDING + (i * LEGEND_CELL_WIDTH)) +\", \"+ (LEGEND_HEIGHT + 4) +\")\")\r\n                  .text( (d, i) => (`>` + Math.round(d*1000)/1000) + `°`);\r\n            \r\n            console.log(TEMP_SEGMENTS);\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"ui container\">    \r\n                <div className=\"ui segment\">\r\n                   <h2 id=\"title\">Monthly Global Land-Surface Temperature 1753-2015</h2>\r\n                   <h4 id=\"description\">(base temperature 8.66&deg; Celsius)</h4>\r\n                   <div id=\"chart\"></div>\r\n                   <div className=\"ui segment\" id=\"legend\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App.js';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}